# Introduction

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>

# Conventions

# The FQ_Codel Approach

## Overview of FQ_CoDel's algorithm

FQ_Codel is a *hybrid* of DRR and Codel, with an optimization for sparse flows similar to SQF. Rather than call this "Fair Queueing", we call it "Flow Queuing"
as it is *unfair* to flow that build a queue.

FQ_Codel uses a stochastic model to classify incoming packets into different flows and  is used  to  provide  a fair share of the bandwidth to all the flow building flows using the queue. Each such flow is managed by the CoDel  queuing  discipline.  Reordering  within a flow is avoided since Codel internally uses a FIFO queue.

### About the interval

The interval has the same semantics as codel and is used to ensure that the measured minimum delay does not become too stale.  The  minimum  delay  must  be
experienced  in the last epoch of length interval.  It should be set
on the order of the worst-case RTT through the bottleneck to give  end‐
points sufficient time to react. 

Default value is 100ms.

### About the target

The target has the same semantics as ()[codel] and is the  acceptable  minimum  standing/persistent queue delay. This minimum delay is identified by track‐
ing the local minimum queue delay  that  packets  experience. 

Default value is 5ms.

### About the packet limit

the packet limit has the same semantics as codel and is the hard limit on the real queue size.  When  this  limit  is  reached, incoming packets from the
largest queue (measured in bytes) are dropped.

Default is 10240 packets.

### About the quantum

The quantum is the number of bytes used as 'deficit' in the flow
queuing algorithm. Default is set to 1514 bytes which corresponds to
the Ethernet MTU plus the hardware header length of 14 bytes.

### About flows

The flows is the number of flows into which the incoming packets are
classified. Due to the stochastic nature of hashing, multiple flows
may end up being hashed into the same slot. FIXME: "Newer flows have priority
over older ones."

This parameter can be set only at load time since memory has to be
allocated for the hash table.  Default value is 1024.

### About ECN

ECN is *enabled* by default. Rather than do anything special with
misbehaved ECN flows, FQ_CoDel relies on the packet scheduling system
to minimize their impact, thus unresponsive packets in a flow being
marked with ECN can grow to the overall packet limit, but will not
otherwise affect the performance of the system.

### Example of use

|   tc qdisc del dev eth0 root
|  tc qdisc add dev eth0 root fq_codel
|  tc -s qdisc show
|       qdisc  fq_codel  8002:  dev  eth0 root refcnt 2 limit 10240p flows 1024
|       quantum 1514
|        target 5.0ms interval 100.0ms ecn
|          Sent 428514 bytes 2269 pkt (dropped 0, overlimits 0 requeues 0)
|          backlog 0b 0p requeues 0
|           maxpacket 256 drop_overlimit 0 new_flow_count 0 ecn_mark 0
|           new_flows_len 0 old_flows_len 0


|    tc qdisc del dev eth0 root
|   tc qdisc add dev dev eth0 root fq_codel limit 800  target  20ms  interval 120ms noecn
|   tc -s qdisc show dev eth0
|       qdisc  fq_codel  8003:  dev  eth0  root refcnt 2 limit 800p flows 1024
|      quantum 1514 target 20.0ms interval 120.0ms
|       Sent 2588985006 bytes 1783629 pkt (dropped 0,  overlimits  0  requeues
|      34869)
|        backlog 0b 0p requeues 34869
|        maxpacket 65226 drop_overlimit 0 new_flow_count 73 ecn_mark 0
|        new_flows_len 1 old_flows_len 3

# Data Types

## Per-queue state

## Constants

## Hash routine

## Enqueue routine

## Dequeue routine

## Helper routines

# Implementation considerations

# Resources and Additional Information

# Security Considerations
This document describes an hybrid packet scheduling and active queue management
algorithm for implementation in networked devices. There are no specific security
exposures associated with FQ_CoDel. Some exposures are in fact reduced (simpleminded
packet floods).

# IANA Considerations
This document has no actions for IANA.

# Acknowlegements

# Conclusions

FQ_CoDel is a very general, efficient, nearly parameterless active queue
management approach that applies on top of CoDel. It is a critical tool in solving bufferbloat. FQ_CoDel's settings MAY be modified for other special-purpose networking applications.

On-going projects are: improving fq_codel with more SFQ-like behavior for lower
bandwidth systems [NFQCODEL](http://www.bufferbloat.net/projects/cerowrt/wiki/nfq_codel).  ns2 and ns3 models are available.
